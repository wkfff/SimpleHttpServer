//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WinHost.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultInfoOfArrayOfstringuHEDJ7Dj", Namespace="http://schemas.datacontract.org/2004/07/HelpBase")]
    [System.SerializableAttribute()]
    public partial struct ResultInfoOfArrayOfstringuHEDJ7Dj : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ObjField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsError {
            get {
                return this.IsErrorField;
            }
            set {
                if ((this.IsErrorField.Equals(value) != true)) {
                    this.IsErrorField = value;
                    this.RaisePropertyChanged("IsError");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Obj {
            get {
                return this.ObjField;
            }
            set {
                if ((object.ReferenceEquals(this.ObjField, value) != true)) {
                    this.ObjField = value;
                    this.RaisePropertyChanged("Obj");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MailType", Namespace="http://schemas.datacontract.org/2004/07/Proto.GameModel")]
    public enum MailType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Common = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Notice = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Award = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Card1 = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Card2 = 21,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultInfo", Namespace="http://schemas.datacontract.org/2004/07/HelpBase")]
    [System.SerializableAttribute()]
    public partial struct ResultInfo : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsError {
            get {
                return this.IsErrorField;
            }
            set {
                if ((this.IsErrorField.Equals(value) != true)) {
                    this.IsErrorField = value;
                    this.RaisePropertyChanged("IsError");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.GameProxy")]
    public interface GameProxy {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/RC", ReplyAction="http://tempuri.org/GameProxy/RCResponse")]
        string RC(string lt, string ct);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/RC", ReplyAction="http://tempuri.org/GameProxy/RCResponse")]
        System.Threading.Tasks.Task<string> RCAsync(string lt, string ct);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SVNUpdateAsset", ReplyAction="http://tempuri.org/GameProxy/SVNUpdateAssetResponse")]
        string SVNUpdateAsset();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SVNUpdateAsset", ReplyAction="http://tempuri.org/GameProxy/SVNUpdateAssetResponse")]
        System.Threading.Tasks.Task<string> SVNUpdateAssetAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SVNUpdateConfig", ReplyAction="http://tempuri.org/GameProxy/SVNUpdateConfigResponse")]
        string SVNUpdateConfig();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SVNUpdateConfig", ReplyAction="http://tempuri.org/GameProxy/SVNUpdateConfigResponse")]
        System.Threading.Tasks.Task<string> SVNUpdateConfigAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/ReloadConfig", ReplyAction="http://tempuri.org/GameProxy/ReloadConfigResponse")]
        string ReloadConfig();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/ReloadConfig", ReplyAction="http://tempuri.org/GameProxy/ReloadConfigResponse")]
        System.Threading.Tasks.Task<string> ReloadConfigAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetActivityList", ReplyAction="http://tempuri.org/GameProxy/GetActivityListResponse")]
        string GetActivityList(string name, long startDate, long endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetActivityList", ReplyAction="http://tempuri.org/GameProxy/GetActivityListResponse")]
        System.Threading.Tasks.Task<string> GetActivityListAsync(string name, long startDate, long endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetActivityData", ReplyAction="http://tempuri.org/GameProxy/GetActivityDataResponse")]
        string GetActivityData(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetActivityData", ReplyAction="http://tempuri.org/GameProxy/GetActivityDataResponse")]
        System.Threading.Tasks.Task<string> GetActivityDataAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/DeleteActivity", ReplyAction="http://tempuri.org/GameProxy/DeleteActivityResponse")]
        string DeleteActivity(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/DeleteActivity", ReplyAction="http://tempuri.org/GameProxy/DeleteActivityResponse")]
        System.Threading.Tasks.Task<string> DeleteActivityAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetActivityTemplate", ReplyAction="http://tempuri.org/GameProxy/GetActivityTemplateResponse")]
        string GetActivityTemplate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetActivityTemplate", ReplyAction="http://tempuri.org/GameProxy/GetActivityTemplateResponse")]
        System.Threading.Tasks.Task<string> GetActivityTemplateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetActivityTemplates", ReplyAction="http://tempuri.org/GameProxy/GetActivityTemplatesResponse")]
        string GetActivityTemplates();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetActivityTemplates", ReplyAction="http://tempuri.org/GameProxy/GetActivityTemplatesResponse")]
        System.Threading.Tasks.Task<string> GetActivityTemplatesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetActivityTemplates2", ReplyAction="http://tempuri.org/GameProxy/GetActivityTemplates2Response")]
        string GetActivityTemplates2();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetActivityTemplates2", ReplyAction="http://tempuri.org/GameProxy/GetActivityTemplates2Response")]
        System.Threading.Tasks.Task<string> GetActivityTemplates2Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetEntityTemplate", ReplyAction="http://tempuri.org/GameProxy/GetEntityTemplateResponse")]
        string GetEntityTemplate(string typename, long key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetEntityTemplate", ReplyAction="http://tempuri.org/GameProxy/GetEntityTemplateResponse")]
        System.Threading.Tasks.Task<string> GetEntityTemplateAsync(string typename, long key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetEntityPropertyTemplate", ReplyAction="http://tempuri.org/GameProxy/GetEntityPropertyTemplateResponse")]
        string GetEntityPropertyTemplate(string typename, long key, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetEntityPropertyTemplate", ReplyAction="http://tempuri.org/GameProxy/GetEntityPropertyTemplateResponse")]
        System.Threading.Tasks.Task<string> GetEntityPropertyTemplateAsync(string typename, long key, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/CreateActivity", ReplyAction="http://tempuri.org/GameProxy/CreateActivityResponse")]
        string CreateActivity(string className);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/CreateActivity", ReplyAction="http://tempuri.org/GameProxy/CreateActivityResponse")]
        System.Threading.Tasks.Task<string> CreateActivityAsync(string className);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SetActivity", ReplyAction="http://tempuri.org/GameProxy/SetActivityResponse")]
        string SetActivity(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SetActivity", ReplyAction="http://tempuri.org/GameProxy/SetActivityResponse")]
        System.Threading.Tasks.Task<string> SetActivityAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SetActivityNew", ReplyAction="http://tempuri.org/GameProxy/SetActivityNewResponse")]
        string SetActivityNew(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SetActivityNew", ReplyAction="http://tempuri.org/GameProxy/SetActivityNewResponse")]
        System.Threading.Tasks.Task<string> SetActivityNewAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/ES", ReplyAction="http://tempuri.org/GameProxy/ESResponse")]
        string ES(string c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/ES", ReplyAction="http://tempuri.org/GameProxy/ESResponse")]
        System.Threading.Tasks.Task<string> ESAsync(string c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GAC", ReplyAction="http://tempuri.org/GameProxy/GACResponse")]
        string GAC(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GAC", ReplyAction="http://tempuri.org/GameProxy/GACResponse")]
        System.Threading.Tasks.Task<string> GACAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SAC", ReplyAction="http://tempuri.org/GameProxy/SACResponse")]
        string SAC(long id, string property, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SAC", ReplyAction="http://tempuri.org/GameProxy/SACResponse")]
        System.Threading.Tasks.Task<string> SACAsync(long id, string property, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/ChangeProperty", ReplyAction="http://tempuri.org/GameProxy/ChangePropertyResponse")]
        string ChangeProperty(string typename, long ID, string property, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/ChangeProperty", ReplyAction="http://tempuri.org/GameProxy/ChangePropertyResponse")]
        System.Threading.Tasks.Task<string> ChangePropertyAsync(string typename, long ID, string property, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/Add", ReplyAction="http://tempuri.org/GameProxy/AddResponse")]
        double Add(double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/Add", ReplyAction="http://tempuri.org/GameProxy/AddResponse")]
        System.Threading.Tasks.Task<double> AddAsync(double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/DoCommand", ReplyAction="http://tempuri.org/GameProxy/DoCommandResponse")]
        string DoCommand(string command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/DoCommand", ReplyAction="http://tempuri.org/GameProxy/DoCommandResponse")]
        System.Threading.Tasks.Task<string> DoCommandAsync(string command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/ActivateAccount", ReplyAction="http://tempuri.org/GameProxy/ActivateAccountResponse")]
        string ActivateAccount(string name, string password, string platform, int platformAccountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/ActivateAccount", ReplyAction="http://tempuri.org/GameProxy/ActivateAccountResponse")]
        System.Threading.Tasks.Task<string> ActivateAccountAsync(string name, string password, string platform, int platformAccountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/OnlineCount", ReplyAction="http://tempuri.org/GameProxy/OnlineCountResponse")]
        int OnlineCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/OnlineCount", ReplyAction="http://tempuri.org/GameProxy/OnlineCountResponse")]
        System.Threading.Tasks.Task<int> OnlineCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/UpdateCharacterAccount", ReplyAction="http://tempuri.org/GameProxy/UpdateCharacterAccountResponse")]
        string UpdateCharacterAccount(string oan, string nan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/UpdateCharacterAccount", ReplyAction="http://tempuri.org/GameProxy/UpdateCharacterAccountResponse")]
        System.Threading.Tasks.Task<string> UpdateCharacterAccountAsync(string oan, string nan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/ChangeCharacterAccount", ReplyAction="http://tempuri.org/GameProxy/ChangeCharacterAccountResponse")]
        string ChangeCharacterAccount(string oldAccount, string oldPassword, string newAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/ChangeCharacterAccount", ReplyAction="http://tempuri.org/GameProxy/ChangeCharacterAccountResponse")]
        System.Threading.Tasks.Task<string> ChangeCharacterAccountAsync(string oldAccount, string oldPassword, string newAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/NewCharacter", ReplyAction="http://tempuri.org/GameProxy/NewCharacterResponse")]
        string NewCharacter(string AccountName, string Nickname, int Gender);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/NewCharacter", ReplyAction="http://tempuri.org/GameProxy/NewCharacterResponse")]
        System.Threading.Tasks.Task<string> NewCharacterAsync(string AccountName, string Nickname, int Gender);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetCharacters", ReplyAction="http://tempuri.org/GameProxy/GetCharactersResponse")]
        string GetCharacters(string AccountName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetCharacters", ReplyAction="http://tempuri.org/GameProxy/GetCharactersResponse")]
        System.Threading.Tasks.Task<string> GetCharactersAsync(string AccountName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/Character", ReplyAction="http://tempuri.org/GameProxy/CharacterResponse")]
        string Character(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/Character", ReplyAction="http://tempuri.org/GameProxy/CharacterResponse")]
        System.Threading.Tasks.Task<string> CharacterAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetCharacterItemList", ReplyAction="http://tempuri.org/GameProxy/GetCharacterItemListResponse")]
        string GetCharacterItemList(long cid, string propertyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetCharacterItemList", ReplyAction="http://tempuri.org/GameProxy/GetCharacterItemListResponse")]
        System.Threading.Tasks.Task<string> GetCharacterItemListAsync(long cid, string propertyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/CharacterLv", ReplyAction="http://tempuri.org/GameProxy/CharacterLvResponse")]
        string CharacterLv(string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/CharacterLv", ReplyAction="http://tempuri.org/GameProxy/CharacterLvResponse")]
        System.Threading.Tasks.Task<string> CharacterLvAsync(string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/Characters", ReplyAction="http://tempuri.org/GameProxy/CharactersResponse")]
        string Characters(string index, string count, string sort);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/Characters", ReplyAction="http://tempuri.org/GameProxy/CharactersResponse")]
        System.Threading.Tasks.Task<string> CharactersAsync(string index, string count, string sort);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/CustomerMails", ReplyAction="http://tempuri.org/GameProxy/CustomerMailsResponse")]
        string CustomerMails(int index, int count, int type, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/CustomerMails", ReplyAction="http://tempuri.org/GameProxy/CustomerMailsResponse")]
        System.Threading.Tasks.Task<string> CustomerMailsAsync(int index, int count, int type, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SearchEmails", ReplyAction="http://tempuri.org/GameProxy/SearchEmailsResponse")]
        string SearchEmails(int type, int status, string cName, string cID, string accountName, string gmName, string startTime, string endTime, string content, int index, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SearchEmails", ReplyAction="http://tempuri.org/GameProxy/SearchEmailsResponse")]
        System.Threading.Tasks.Task<string> SearchEmailsAsync(int type, int status, string cName, string cID, string accountName, string gmName, string startTime, string endTime, string content, int index, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/Pay", ReplyAction="http://tempuri.org/GameProxy/PayResponse")]
        int Pay(string accountName, int money, int dollar, string ordernumber, int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/Pay", ReplyAction="http://tempuri.org/GameProxy/PayResponse")]
        System.Threading.Tasks.Task<int> PayAsync(string accountName, int money, int dollar, string ordernumber, int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/BuyByCid", ReplyAction="http://tempuri.org/GameProxy/BuyByCidResponse")]
        string BuyByCid(long cid, long id, string ordernumber, int paidMoneyInCents, bool recordMoney, int serverid, int aid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/BuyByCid", ReplyAction="http://tempuri.org/GameProxy/BuyByCidResponse")]
        System.Threading.Tasks.Task<string> BuyByCidAsync(long cid, long id, string ordernumber, int paidMoneyInCents, bool recordMoney, int serverid, int aid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/DayStateRecord", ReplyAction="http://tempuri.org/GameProxy/DayStateRecordResponse")]
        string DayStateRecord();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/DayStateRecord", ReplyAction="http://tempuri.org/GameProxy/DayStateRecordResponse")]
        System.Threading.Tasks.Task<string> DayStateRecordAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/DayStateRecords", ReplyAction="http://tempuri.org/GameProxy/DayStateRecordsResponse")]
        string DayStateRecords(int index, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/DayStateRecords", ReplyAction="http://tempuri.org/GameProxy/DayStateRecordsResponse")]
        System.Threading.Tasks.Task<string> DayStateRecordsAsync(int index, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetActiveInfo", ReplyAction="http://tempuri.org/GameProxy/GetActiveInfoResponse")]
        string GetActiveInfo(string start, string end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetActiveInfo", ReplyAction="http://tempuri.org/GameProxy/GetActiveInfoResponse")]
        System.Threading.Tasks.Task<string> GetActiveInfoAsync(string start, string end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SetAdminLv", ReplyAction="http://tempuri.org/GameProxy/SetAdminLvResponse")]
        string SetAdminLv(string cname, int adminLv);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SetAdminLv", ReplyAction="http://tempuri.org/GameProxy/SetAdminLvResponse")]
        System.Threading.Tasks.Task<string> SetAdminLvAsync(string cname, int adminLv);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/PaoMaDeng", ReplyAction="http://tempuri.org/GameProxy/PaoMaDengResponse")]
        string PaoMaDeng(string content, int times);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/PaoMaDeng", ReplyAction="http://tempuri.org/GameProxy/PaoMaDengResponse")]
        System.Threading.Tasks.Task<string> PaoMaDengAsync(string content, int times);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/LvGroups", ReplyAction="http://tempuri.org/GameProxy/LvGroupsResponse")]
        string LvGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/LvGroups", ReplyAction="http://tempuri.org/GameProxy/LvGroupsResponse")]
        System.Threading.Tasks.Task<string> LvGroupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/ObjectChange", ReplyAction="http://tempuri.org/GameProxy/ObjectChangeResponse")]
        string ObjectChange(string sd, string ed, string name, int type, int ctype, int ownerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/ObjectChange", ReplyAction="http://tempuri.org/GameProxy/ObjectChangeResponse")]
        System.Threading.Tasks.Task<string> ObjectChangeAsync(string sd, string ed, string name, int type, int ctype, int ownerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/OCRecord", ReplyAction="http://tempuri.org/GameProxy/OCRecordResponse")]
        string OCRecord(string ownerName, int index, int count, string action, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/OCRecord", ReplyAction="http://tempuri.org/GameProxy/OCRecordResponse")]
        System.Threading.Tasks.Task<string> OCRecordAsync(string ownerName, int index, int count, string action, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/AllProperties", ReplyAction="http://tempuri.org/GameProxy/AllPropertiesResponse")]
        string AllProperties(int category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/AllProperties", ReplyAction="http://tempuri.org/GameProxy/AllPropertiesResponse")]
        System.Threading.Tasks.Task<string> AllPropertiesAsync(int category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/PayRecords", ReplyAction="http://tempuri.org/GameProxy/PayRecordsResponse")]
        string PayRecords();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/PayRecords", ReplyAction="http://tempuri.org/GameProxy/PayRecordsResponse")]
        System.Threading.Tasks.Task<string> PayRecordsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetFinancialData", ReplyAction="http://tempuri.org/GameProxy/GetFinancialDataResponse")]
        string GetFinancialData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetFinancialData", ReplyAction="http://tempuri.org/GameProxy/GetFinancialDataResponse")]
        System.Threading.Tasks.Task<string> GetFinancialDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetServerOpenStatus", ReplyAction="http://tempuri.org/GameProxy/GetServerOpenStatusResponse")]
        string GetServerOpenStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetServerOpenStatus", ReplyAction="http://tempuri.org/GameProxy/GetServerOpenStatusResponse")]
        System.Threading.Tasks.Task<string> GetServerOpenStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SetServerOpenStatus", ReplyAction="http://tempuri.org/GameProxy/SetServerOpenStatusResponse")]
        string SetServerOpenStatus(string openTimestamp, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SetServerOpenStatus", ReplyAction="http://tempuri.org/GameProxy/SetServerOpenStatusResponse")]
        System.Threading.Tasks.Task<string> SetServerOpenStatusAsync(string openTimestamp, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/StopChat", ReplyAction="http://tempuri.org/GameProxy/StopChatResponse")]
        string StopChat(string name, int minute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/StopChat", ReplyAction="http://tempuri.org/GameProxy/StopChatResponse")]
        System.Threading.Tasks.Task<string> StopChatAsync(string name, int minute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/StopLogin", ReplyAction="http://tempuri.org/GameProxy/StopLoginResponse")]
        string StopLogin(string name, int minute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/StopLogin", ReplyAction="http://tempuri.org/GameProxy/StopLoginResponse")]
        System.Threading.Tasks.Task<string> StopLoginAsync(string name, int minute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/StopIP", ReplyAction="http://tempuri.org/GameProxy/StopIPResponse")]
        string StopIP(string ip, bool remove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/StopIP", ReplyAction="http://tempuri.org/GameProxy/StopIPResponse")]
        System.Threading.Tasks.Task<string> StopIPAsync(string ip, bool remove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/UnstopIP", ReplyAction="http://tempuri.org/GameProxy/UnstopIPResponse")]
        string UnstopIP(string ip, bool remove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/UnstopIP", ReplyAction="http://tempuri.org/GameProxy/UnstopIPResponse")]
        System.Threading.Tasks.Task<string> UnstopIPAsync(string ip, bool remove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SystemMails", ReplyAction="http://tempuri.org/GameProxy/SystemMailsResponse")]
        string SystemMails(int index, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SystemMails", ReplyAction="http://tempuri.org/GameProxy/SystemMailsResponse")]
        System.Threading.Tasks.Task<string> SystemMailsAsync(int index, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendSystemMail", ReplyAction="http://tempuri.org/GameProxy/SendSystemMailResponse")]
        string SendSystemMail(string title, string content, string awardString, int orderTimestamp, int deadlineTimestamp, int type, string conditions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendSystemMail", ReplyAction="http://tempuri.org/GameProxy/SendSystemMailResponse")]
        System.Threading.Tasks.Task<string> SendSystemMailAsync(string title, string content, string awardString, int orderTimestamp, int deadlineTimestamp, int type, string conditions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/UpdateSystemMail", ReplyAction="http://tempuri.org/GameProxy/UpdateSystemMailResponse")]
        string UpdateSystemMail(long id, string title, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/UpdateSystemMail", ReplyAction="http://tempuri.org/GameProxy/UpdateSystemMailResponse")]
        System.Threading.Tasks.Task<string> UpdateSystemMailAsync(long id, string title, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendMailsByAccount", ReplyAction="http://tempuri.org/GameProxy/SendMailsByAccountResponse")]
        WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj SendMailsByAccount(string accounts, string title, string content, string awards, string orderTime, string DeadLine, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendMailsByAccount", ReplyAction="http://tempuri.org/GameProxy/SendMailsByAccountResponse")]
        System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj> SendMailsByAccountAsync(string accounts, string title, string content, string awards, string orderTime, string DeadLine, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendMailsByAccountNew", ReplyAction="http://tempuri.org/GameProxy/SendMailsByAccountNewResponse")]
        string SendMailsByAccountNew(string accounts, string title, string content, string awards, int deadlineTimestamp, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendMailsByAccountNew", ReplyAction="http://tempuri.org/GameProxy/SendMailsByAccountNewResponse")]
        System.Threading.Tasks.Task<string> SendMailsByAccountNewAsync(string accounts, string title, string content, string awards, int deadlineTimestamp, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendMailsByID", ReplyAction="http://tempuri.org/GameProxy/SendMailsByIDResponse")]
        string SendMailsByID(string cids, string title, string content, string awards, int deadlineTimestamp, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendMailsByID", ReplyAction="http://tempuri.org/GameProxy/SendMailsByIDResponse")]
        System.Threading.Tasks.Task<string> SendMailsByIDAsync(string cids, string title, string content, string awards, int deadlineTimestamp, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendMailsByLv", ReplyAction="http://tempuri.org/GameProxy/SendMailsByLvResponse")]
        WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj SendMailsByLv(int minLv, int maxLv, string title, string content, WinHost.ServiceReference1.MailType type, string awards, string DeadLine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendMailsByLv", ReplyAction="http://tempuri.org/GameProxy/SendMailsByLvResponse")]
        System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj> SendMailsByLvAsync(int minLv, int maxLv, string title, string content, WinHost.ServiceReference1.MailType type, string awards, string DeadLine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendMailsByLvNew", ReplyAction="http://tempuri.org/GameProxy/SendMailsByLvNewResponse")]
        string SendMailsByLvNew(int minLv, int maxLv, string title, string content, WinHost.ServiceReference1.MailType type, string awards, int deadlineTimestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendMailsByLvNew", ReplyAction="http://tempuri.org/GameProxy/SendMailsByLvNewResponse")]
        System.Threading.Tasks.Task<string> SendMailsByLvNewAsync(int minLv, int maxLv, string title, string content, WinHost.ServiceReference1.MailType type, string awards, int deadlineTimestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendMailsByName", ReplyAction="http://tempuri.org/GameProxy/SendMailsByNameResponse")]
        string SendMailsByName(string cnames, string title, string content, string awards, string DeadLine, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendMailsByName", ReplyAction="http://tempuri.org/GameProxy/SendMailsByNameResponse")]
        System.Threading.Tasks.Task<string> SendMailsByNameAsync(string cnames, string title, string content, string awards, string DeadLine, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendMailsByNameNew", ReplyAction="http://tempuri.org/GameProxy/SendMailsByNameNewResponse")]
        string SendMailsByNameNew(string cnames, string title, string content, string awards, int deadlineTimestamp, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendMailsByNameNew", ReplyAction="http://tempuri.org/GameProxy/SendMailsByNameNewResponse")]
        System.Threading.Tasks.Task<string> SendMailsByNameNewAsync(string cnames, string title, string content, string awards, int deadlineTimestamp, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/DeleteSystemMail", ReplyAction="http://tempuri.org/GameProxy/DeleteSystemMailResponse")]
        string DeleteSystemMail(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/DeleteSystemMail", ReplyAction="http://tempuri.org/GameProxy/DeleteSystemMailResponse")]
        System.Threading.Tasks.Task<string> DeleteSystemMailAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/DeleteSMBT", ReplyAction="http://tempuri.org/GameProxy/DeleteSMBTResponse")]
        string DeleteSMBT(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/DeleteSMBT", ReplyAction="http://tempuri.org/GameProxy/DeleteSMBTResponse")]
        System.Threading.Tasks.Task<string> DeleteSMBTAsync(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/CharacterByName", ReplyAction="http://tempuri.org/GameProxy/CharacterByNameResponse")]
        string CharacterByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/CharacterByName", ReplyAction="http://tempuri.org/GameProxy/CharacterByNameResponse")]
        System.Threading.Tasks.Task<string> CharacterByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/CharactersByAccount", ReplyAction="http://tempuri.org/GameProxy/CharactersByAccountResponse")]
        string CharactersByAccount(string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/CharactersByAccount", ReplyAction="http://tempuri.org/GameProxy/CharactersByAccountResponse")]
        System.Threading.Tasks.Task<string> CharactersByAccountAsync(string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/PayByCidInternal", ReplyAction="http://tempuri.org/GameProxy/PayByCidInternalResponse")]
        WinHost.ServiceReference1.ResultInfo PayByCidInternal(int cid, int quantity, byte type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/PayByCidInternal", ReplyAction="http://tempuri.org/GameProxy/PayByCidInternalResponse")]
        System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfo> PayByCidInternalAsync(int cid, int quantity, byte type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/PayByCNameInternal", ReplyAction="http://tempuri.org/GameProxy/PayByCNameInternalResponse")]
        WinHost.ServiceReference1.ResultInfo PayByCNameInternal(string name, int quantity, byte type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/PayByCNameInternal", ReplyAction="http://tempuri.org/GameProxy/PayByCNameInternalResponse")]
        System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfo> PayByCNameInternalAsync(string name, int quantity, byte type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/PayByCAccountNameInternal", ReplyAction="http://tempuri.org/GameProxy/PayByCAccountNameInternalResponse")]
        WinHost.ServiceReference1.ResultInfo PayByCAccountNameInternal(string accountName, int quantity, byte type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/PayByCAccountNameInternal", ReplyAction="http://tempuri.org/GameProxy/PayByCAccountNameInternalResponse")]
        System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfo> PayByCAccountNameInternalAsync(string accountName, int quantity, byte type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/FreezeUser", ReplyAction="http://tempuri.org/GameProxy/FreezeUserResponse")]
        string FreezeUser(long cid, long endFreezeTimestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/FreezeUser", ReplyAction="http://tempuri.org/GameProxy/FreezeUserResponse")]
        System.Threading.Tasks.Task<string> FreezeUserAsync(long cid, long endFreezeTimestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/KickUser", ReplyAction="http://tempuri.org/GameProxy/KickUserResponse")]
        string KickUser(long cid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/KickUser", ReplyAction="http://tempuri.org/GameProxy/KickUserResponse")]
        System.Threading.Tasks.Task<string> KickUserAsync(long cid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendAwardAll", ReplyAction="http://tempuri.org/GameProxy/SendAwardAllResponse")]
        WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj SendAwardAll(string awards, string type, string mailContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendAwardAll", ReplyAction="http://tempuri.org/GameProxy/SendAwardAllResponse")]
        System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj> SendAwardAllAsync(string awards, string type, string mailContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendAwardByAccount", ReplyAction="http://tempuri.org/GameProxy/SendAwardByAccountResponse")]
        WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj SendAwardByAccount(string[] accounts, string awards, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendAwardByAccount", ReplyAction="http://tempuri.org/GameProxy/SendAwardByAccountResponse")]
        System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj> SendAwardByAccountAsync(string[] accounts, string awards, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendAwardByID", ReplyAction="http://tempuri.org/GameProxy/SendAwardByIDResponse")]
        WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj SendAwardByID(long[] cids, string awards, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendAwardByID", ReplyAction="http://tempuri.org/GameProxy/SendAwardByIDResponse")]
        System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj> SendAwardByIDAsync(long[] cids, string awards, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendAwardByLv", ReplyAction="http://tempuri.org/GameProxy/SendAwardByLvResponse")]
        WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj SendAwardByLv(int minLv, int maxLv, string awards);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendAwardByLv", ReplyAction="http://tempuri.org/GameProxy/SendAwardByLvResponse")]
        System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj> SendAwardByLvAsync(int minLv, int maxLv, string awards);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendAwardByName", ReplyAction="http://tempuri.org/GameProxy/SendAwardByNameResponse")]
        WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj SendAwardByName(string[] cnames, string awards);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendAwardByName", ReplyAction="http://tempuri.org/GameProxy/SendAwardByNameResponse")]
        System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj> SendAwardByNameAsync(string[] cnames, string awards);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendAwardByNameNew", ReplyAction="http://tempuri.org/GameProxy/SendAwardByNameNewResponse")]
        string SendAwardByNameNew(string[] cnames, string awards);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SendAwardByNameNew", ReplyAction="http://tempuri.org/GameProxy/SendAwardByNameNewResponse")]
        System.Threading.Tasks.Task<string> SendAwardByNameNewAsync(string[] cnames, string awards);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SilentUser", ReplyAction="http://tempuri.org/GameProxy/SilentUserResponse")]
        WinHost.ServiceReference1.ResultInfo SilentUser(long cid, bool silent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SilentUser", ReplyAction="http://tempuri.org/GameProxy/SilentUserResponse")]
        System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfo> SilentUserAsync(long cid, bool silent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetSystemAward", ReplyAction="http://tempuri.org/GameProxy/GetSystemAwardResponse")]
        string GetSystemAward(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetSystemAward", ReplyAction="http://tempuri.org/GameProxy/GetSystemAwardResponse")]
        System.Threading.Tasks.Task<string> GetSystemAwardAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetAllSystemAwards", ReplyAction="http://tempuri.org/GameProxy/GetAllSystemAwardsResponse")]
        string GetAllSystemAwards();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetAllSystemAwards", ReplyAction="http://tempuri.org/GameProxy/GetAllSystemAwardsResponse")]
        System.Threading.Tasks.Task<string> GetAllSystemAwardsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetServerTime", ReplyAction="http://tempuri.org/GameProxy/GetServerTimeResponse")]
        string GetServerTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetServerTime", ReplyAction="http://tempuri.org/GameProxy/GetServerTimeResponse")]
        System.Threading.Tasks.Task<string> GetServerTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SetServerTime", ReplyAction="http://tempuri.org/GameProxy/SetServerTimeResponse")]
        string SetServerTime(int timestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SetServerTime", ReplyAction="http://tempuri.org/GameProxy/SetServerTimeResponse")]
        System.Threading.Tasks.Task<string> SetServerTimeAsync(int timestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetServerBirthTime", ReplyAction="http://tempuri.org/GameProxy/GetServerBirthTimeResponse")]
        string GetServerBirthTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetServerBirthTime", ReplyAction="http://tempuri.org/GameProxy/GetServerBirthTimeResponse")]
        System.Threading.Tasks.Task<string> GetServerBirthTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SetServerBirthTime", ReplyAction="http://tempuri.org/GameProxy/SetServerBirthTimeResponse")]
        string SetServerBirthTime(int timestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SetServerBirthTime", ReplyAction="http://tempuri.org/GameProxy/SetServerBirthTimeResponse")]
        System.Threading.Tasks.Task<string> SetServerBirthTimeAsync(int timestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetOpenLoginTime", ReplyAction="http://tempuri.org/GameProxy/GetOpenLoginTimeResponse")]
        string GetOpenLoginTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetOpenLoginTime", ReplyAction="http://tempuri.org/GameProxy/GetOpenLoginTimeResponse")]
        System.Threading.Tasks.Task<string> GetOpenLoginTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SetOpenLoginTime", ReplyAction="http://tempuri.org/GameProxy/SetOpenLoginTimeResponse")]
        string SetOpenLoginTime(int timestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SetOpenLoginTime", ReplyAction="http://tempuri.org/GameProxy/SetOpenLoginTimeResponse")]
        System.Threading.Tasks.Task<string> SetOpenLoginTimeAsync(int timestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetOpenLoginMessage", ReplyAction="http://tempuri.org/GameProxy/GetOpenLoginMessageResponse")]
        string GetOpenLoginMessage();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetOpenLoginMessage", ReplyAction="http://tempuri.org/GameProxy/GetOpenLoginMessageResponse")]
        System.Threading.Tasks.Task<string> GetOpenLoginMessageAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SetOpenLoginMessage", ReplyAction="http://tempuri.org/GameProxy/SetOpenLoginMessageResponse")]
        string SetOpenLoginMessage(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/SetOpenLoginMessage", ReplyAction="http://tempuri.org/GameProxy/SetOpenLoginMessageResponse")]
        System.Threading.Tasks.Task<string> SetOpenLoginMessageAsync(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/FindCharacterByPartialName", ReplyAction="http://tempuri.org/GameProxy/FindCharacterByPartialNameResponse")]
        string FindCharacterByPartialName(string partialName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/FindCharacterByPartialName", ReplyAction="http://tempuri.org/GameProxy/FindCharacterByPartialNameResponse")]
        System.Threading.Tasks.Task<string> FindCharacterByPartialNameAsync(string partialName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/FindCharacterByAccount", ReplyAction="http://tempuri.org/GameProxy/FindCharacterByAccountResponse")]
        string FindCharacterByAccount(string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/FindCharacterByAccount", ReplyAction="http://tempuri.org/GameProxy/FindCharacterByAccountResponse")]
        System.Threading.Tasks.Task<string> FindCharacterByAccountAsync(string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/FindCharacterByPartialAccount", ReplyAction="http://tempuri.org/GameProxy/FindCharacterByPartialAccountResponse")]
        string FindCharacterByPartialAccount(string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/FindCharacterByPartialAccount", ReplyAction="http://tempuri.org/GameProxy/FindCharacterByPartialAccountResponse")]
        System.Threading.Tasks.Task<string> FindCharacterByPartialAccountAsync(string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/FindCharacterById", ReplyAction="http://tempuri.org/GameProxy/FindCharacterByIdResponse")]
        string FindCharacterById(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/FindCharacterById", ReplyAction="http://tempuri.org/GameProxy/FindCharacterByIdResponse")]
        System.Threading.Tasks.Task<string> FindCharacterByIdAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/CreateTestItems", ReplyAction="http://tempuri.org/GameProxy/CreateTestItemsResponse")]
        string CreateTestItems(long cid, int categoriesInt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/CreateTestItems", ReplyAction="http://tempuri.org/GameProxy/CreateTestItemsResponse")]
        System.Threading.Tasks.Task<string> CreateTestItemsAsync(long cid, int categoriesInt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/DeleteStuff", ReplyAction="http://tempuri.org/GameProxy/DeleteStuffResponse")]
        string DeleteStuff(string type, long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/DeleteStuff", ReplyAction="http://tempuri.org/GameProxy/DeleteStuffResponse")]
        System.Threading.Tasks.Task<string> DeleteStuffAsync(string type, long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/RandomSceneEvent", ReplyAction="http://tempuri.org/GameProxy/RandomSceneEventResponse")]
        void RandomSceneEvent(long targetID, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/RandomSceneEvent", ReplyAction="http://tempuri.org/GameProxy/RandomSceneEventResponse")]
        System.Threading.Tasks.Task RandomSceneEventAsync(long targetID, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetAllItems", ReplyAction="http://tempuri.org/GameProxy/GetAllItemsResponse")]
        string GetAllItems();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetAllItems", ReplyAction="http://tempuri.org/GameProxy/GetAllItemsResponse")]
        System.Threading.Tasks.Task<string> GetAllItemsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/ShowAllAwardOrigin", ReplyAction="http://tempuri.org/GameProxy/ShowAllAwardOriginResponse")]
        string ShowAllAwardOrigin();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/ShowAllAwardOrigin", ReplyAction="http://tempuri.org/GameProxy/ShowAllAwardOriginResponse")]
        System.Threading.Tasks.Task<string> ShowAllAwardOriginAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/ShowAwardOrigin", ReplyAction="http://tempuri.org/GameProxy/ShowAwardOriginResponse")]
        string ShowAwardOrigin(long typeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/ShowAwardOrigin", ReplyAction="http://tempuri.org/GameProxy/ShowAwardOriginResponse")]
        System.Threading.Tasks.Task<string> ShowAwardOriginAsync(long typeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/InitAwardSummary", ReplyAction="http://tempuri.org/GameProxy/InitAwardSummaryResponse")]
        string InitAwardSummary();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/InitAwardSummary", ReplyAction="http://tempuri.org/GameProxy/InitAwardSummaryResponse")]
        System.Threading.Tasks.Task<string> InitAwardSummaryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/TestWebJson", ReplyAction="http://tempuri.org/GameProxy/TestWebJsonResponse")]
        string TestWebJson();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/TestWebJson", ReplyAction="http://tempuri.org/GameProxy/TestWebJsonResponse")]
        System.Threading.Tasks.Task<string> TestWebJsonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/ExcuteScript", ReplyAction="http://tempuri.org/GameProxy/ExcuteScriptResponse")]
        string ExcuteScript(string script);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/ExcuteScript", ReplyAction="http://tempuri.org/GameProxy/ExcuteScriptResponse")]
        System.Threading.Tasks.Task<string> ExcuteScriptAsync(string script);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetPromoUsers", ReplyAction="http://tempuri.org/GameProxy/GetPromoUsersResponse")]
        string GetPromoUsers(string code, int index, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GameProxy/GetPromoUsers", ReplyAction="http://tempuri.org/GameProxy/GetPromoUsersResponse")]
        System.Threading.Tasks.Task<string> GetPromoUsersAsync(string code, int index, int count);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface GameProxyChannel : WinHost.ServiceReference1.GameProxy, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameProxyClient : System.ServiceModel.ClientBase<WinHost.ServiceReference1.GameProxy>, WinHost.ServiceReference1.GameProxy {
        
        public GameProxyClient() {
        }
        
        public GameProxyClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GameProxyClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameProxyClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameProxyClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string RC(string lt, string ct) {
            return base.Channel.RC(lt, ct);
        }
        
        public System.Threading.Tasks.Task<string> RCAsync(string lt, string ct) {
            return base.Channel.RCAsync(lt, ct);
        }
        
        public string SVNUpdateAsset() {
            return base.Channel.SVNUpdateAsset();
        }
        
        public System.Threading.Tasks.Task<string> SVNUpdateAssetAsync() {
            return base.Channel.SVNUpdateAssetAsync();
        }
        
        public string SVNUpdateConfig() {
            return base.Channel.SVNUpdateConfig();
        }
        
        public System.Threading.Tasks.Task<string> SVNUpdateConfigAsync() {
            return base.Channel.SVNUpdateConfigAsync();
        }
        
        public string ReloadConfig() {
            return base.Channel.ReloadConfig();
        }
        
        public System.Threading.Tasks.Task<string> ReloadConfigAsync() {
            return base.Channel.ReloadConfigAsync();
        }
        
        public string GetActivityList(string name, long startDate, long endDate) {
            return base.Channel.GetActivityList(name, startDate, endDate);
        }
        
        public System.Threading.Tasks.Task<string> GetActivityListAsync(string name, long startDate, long endDate) {
            return base.Channel.GetActivityListAsync(name, startDate, endDate);
        }
        
        public string GetActivityData(int id) {
            return base.Channel.GetActivityData(id);
        }
        
        public System.Threading.Tasks.Task<string> GetActivityDataAsync(int id) {
            return base.Channel.GetActivityDataAsync(id);
        }
        
        public string DeleteActivity(int id) {
            return base.Channel.DeleteActivity(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteActivityAsync(int id) {
            return base.Channel.DeleteActivityAsync(id);
        }
        
        public string GetActivityTemplate() {
            return base.Channel.GetActivityTemplate();
        }
        
        public System.Threading.Tasks.Task<string> GetActivityTemplateAsync() {
            return base.Channel.GetActivityTemplateAsync();
        }
        
        public string GetActivityTemplates() {
            return base.Channel.GetActivityTemplates();
        }
        
        public System.Threading.Tasks.Task<string> GetActivityTemplatesAsync() {
            return base.Channel.GetActivityTemplatesAsync();
        }
        
        public string GetActivityTemplates2() {
            return base.Channel.GetActivityTemplates2();
        }
        
        public System.Threading.Tasks.Task<string> GetActivityTemplates2Async() {
            return base.Channel.GetActivityTemplates2Async();
        }
        
        public string GetEntityTemplate(string typename, long key) {
            return base.Channel.GetEntityTemplate(typename, key);
        }
        
        public System.Threading.Tasks.Task<string> GetEntityTemplateAsync(string typename, long key) {
            return base.Channel.GetEntityTemplateAsync(typename, key);
        }
        
        public string GetEntityPropertyTemplate(string typename, long key, string name) {
            return base.Channel.GetEntityPropertyTemplate(typename, key, name);
        }
        
        public System.Threading.Tasks.Task<string> GetEntityPropertyTemplateAsync(string typename, long key, string name) {
            return base.Channel.GetEntityPropertyTemplateAsync(typename, key, name);
        }
        
        public string CreateActivity(string className) {
            return base.Channel.CreateActivity(className);
        }
        
        public System.Threading.Tasks.Task<string> CreateActivityAsync(string className) {
            return base.Channel.CreateActivityAsync(className);
        }
        
        public string SetActivity(string data) {
            return base.Channel.SetActivity(data);
        }
        
        public System.Threading.Tasks.Task<string> SetActivityAsync(string data) {
            return base.Channel.SetActivityAsync(data);
        }
        
        public string SetActivityNew(string data) {
            return base.Channel.SetActivityNew(data);
        }
        
        public System.Threading.Tasks.Task<string> SetActivityNewAsync(string data) {
            return base.Channel.SetActivityNewAsync(data);
        }
        
        public string ES(string c) {
            return base.Channel.ES(c);
        }
        
        public System.Threading.Tasks.Task<string> ESAsync(string c) {
            return base.Channel.ESAsync(c);
        }
        
        public string GAC(long id) {
            return base.Channel.GAC(id);
        }
        
        public System.Threading.Tasks.Task<string> GACAsync(long id) {
            return base.Channel.GACAsync(id);
        }
        
        public string SAC(long id, string property, string value) {
            return base.Channel.SAC(id, property, value);
        }
        
        public System.Threading.Tasks.Task<string> SACAsync(long id, string property, string value) {
            return base.Channel.SACAsync(id, property, value);
        }
        
        public string ChangeProperty(string typename, long ID, string property, string value) {
            return base.Channel.ChangeProperty(typename, ID, property, value);
        }
        
        public System.Threading.Tasks.Task<string> ChangePropertyAsync(string typename, long ID, string property, string value) {
            return base.Channel.ChangePropertyAsync(typename, ID, property, value);
        }
        
        public double Add(double num1, double num2) {
            return base.Channel.Add(num1, num2);
        }
        
        public System.Threading.Tasks.Task<double> AddAsync(double num1, double num2) {
            return base.Channel.AddAsync(num1, num2);
        }
        
        public string DoCommand(string command) {
            return base.Channel.DoCommand(command);
        }
        
        public System.Threading.Tasks.Task<string> DoCommandAsync(string command) {
            return base.Channel.DoCommandAsync(command);
        }
        
        public string ActivateAccount(string name, string password, string platform, int platformAccountID) {
            return base.Channel.ActivateAccount(name, password, platform, platformAccountID);
        }
        
        public System.Threading.Tasks.Task<string> ActivateAccountAsync(string name, string password, string platform, int platformAccountID) {
            return base.Channel.ActivateAccountAsync(name, password, platform, platformAccountID);
        }
        
        public int OnlineCount() {
            return base.Channel.OnlineCount();
        }
        
        public System.Threading.Tasks.Task<int> OnlineCountAsync() {
            return base.Channel.OnlineCountAsync();
        }
        
        public string UpdateCharacterAccount(string oan, string nan) {
            return base.Channel.UpdateCharacterAccount(oan, nan);
        }
        
        public System.Threading.Tasks.Task<string> UpdateCharacterAccountAsync(string oan, string nan) {
            return base.Channel.UpdateCharacterAccountAsync(oan, nan);
        }
        
        public string ChangeCharacterAccount(string oldAccount, string oldPassword, string newAccount) {
            return base.Channel.ChangeCharacterAccount(oldAccount, oldPassword, newAccount);
        }
        
        public System.Threading.Tasks.Task<string> ChangeCharacterAccountAsync(string oldAccount, string oldPassword, string newAccount) {
            return base.Channel.ChangeCharacterAccountAsync(oldAccount, oldPassword, newAccount);
        }
        
        public string NewCharacter(string AccountName, string Nickname, int Gender) {
            return base.Channel.NewCharacter(AccountName, Nickname, Gender);
        }
        
        public System.Threading.Tasks.Task<string> NewCharacterAsync(string AccountName, string Nickname, int Gender) {
            return base.Channel.NewCharacterAsync(AccountName, Nickname, Gender);
        }
        
        public string GetCharacters(string AccountName) {
            return base.Channel.GetCharacters(AccountName);
        }
        
        public System.Threading.Tasks.Task<string> GetCharactersAsync(string AccountName) {
            return base.Channel.GetCharactersAsync(AccountName);
        }
        
        public string Character(long id) {
            return base.Channel.Character(id);
        }
        
        public System.Threading.Tasks.Task<string> CharacterAsync(long id) {
            return base.Channel.CharacterAsync(id);
        }
        
        public string GetCharacterItemList(long cid, string propertyName) {
            return base.Channel.GetCharacterItemList(cid, propertyName);
        }
        
        public System.Threading.Tasks.Task<string> GetCharacterItemListAsync(long cid, string propertyName) {
            return base.Channel.GetCharacterItemListAsync(cid, propertyName);
        }
        
        public string CharacterLv(string account) {
            return base.Channel.CharacterLv(account);
        }
        
        public System.Threading.Tasks.Task<string> CharacterLvAsync(string account) {
            return base.Channel.CharacterLvAsync(account);
        }
        
        public string Characters(string index, string count, string sort) {
            return base.Channel.Characters(index, count, sort);
        }
        
        public System.Threading.Tasks.Task<string> CharactersAsync(string index, string count, string sort) {
            return base.Channel.CharactersAsync(index, count, sort);
        }
        
        public string CustomerMails(int index, int count, int type, int status) {
            return base.Channel.CustomerMails(index, count, type, status);
        }
        
        public System.Threading.Tasks.Task<string> CustomerMailsAsync(int index, int count, int type, int status) {
            return base.Channel.CustomerMailsAsync(index, count, type, status);
        }
        
        public string SearchEmails(int type, int status, string cName, string cID, string accountName, string gmName, string startTime, string endTime, string content, int index, int count) {
            return base.Channel.SearchEmails(type, status, cName, cID, accountName, gmName, startTime, endTime, content, index, count);
        }
        
        public System.Threading.Tasks.Task<string> SearchEmailsAsync(int type, int status, string cName, string cID, string accountName, string gmName, string startTime, string endTime, string content, int index, int count) {
            return base.Channel.SearchEmailsAsync(type, status, cName, cID, accountName, gmName, startTime, endTime, content, index, count);
        }
        
        public int Pay(string accountName, int money, int dollar, string ordernumber, int ID) {
            return base.Channel.Pay(accountName, money, dollar, ordernumber, ID);
        }
        
        public System.Threading.Tasks.Task<int> PayAsync(string accountName, int money, int dollar, string ordernumber, int ID) {
            return base.Channel.PayAsync(accountName, money, dollar, ordernumber, ID);
        }
        
        public string BuyByCid(long cid, long id, string ordernumber, int paidMoneyInCents, bool recordMoney, int serverid, int aid) {
            return base.Channel.BuyByCid(cid, id, ordernumber, paidMoneyInCents, recordMoney, serverid, aid);
        }
        
        public System.Threading.Tasks.Task<string> BuyByCidAsync(long cid, long id, string ordernumber, int paidMoneyInCents, bool recordMoney, int serverid, int aid) {
            return base.Channel.BuyByCidAsync(cid, id, ordernumber, paidMoneyInCents, recordMoney, serverid, aid);
        }
        
        public string DayStateRecord() {
            return base.Channel.DayStateRecord();
        }
        
        public System.Threading.Tasks.Task<string> DayStateRecordAsync() {
            return base.Channel.DayStateRecordAsync();
        }
        
        public string DayStateRecords(int index, int count) {
            return base.Channel.DayStateRecords(index, count);
        }
        
        public System.Threading.Tasks.Task<string> DayStateRecordsAsync(int index, int count) {
            return base.Channel.DayStateRecordsAsync(index, count);
        }
        
        public string GetActiveInfo(string start, string end) {
            return base.Channel.GetActiveInfo(start, end);
        }
        
        public System.Threading.Tasks.Task<string> GetActiveInfoAsync(string start, string end) {
            return base.Channel.GetActiveInfoAsync(start, end);
        }
        
        public string SetAdminLv(string cname, int adminLv) {
            return base.Channel.SetAdminLv(cname, adminLv);
        }
        
        public System.Threading.Tasks.Task<string> SetAdminLvAsync(string cname, int adminLv) {
            return base.Channel.SetAdminLvAsync(cname, adminLv);
        }
        
        public string PaoMaDeng(string content, int times) {
            return base.Channel.PaoMaDeng(content, times);
        }
        
        public System.Threading.Tasks.Task<string> PaoMaDengAsync(string content, int times) {
            return base.Channel.PaoMaDengAsync(content, times);
        }
        
        public string LvGroups() {
            return base.Channel.LvGroups();
        }
        
        public System.Threading.Tasks.Task<string> LvGroupsAsync() {
            return base.Channel.LvGroupsAsync();
        }
        
        public string ObjectChange(string sd, string ed, string name, int type, int ctype, int ownerID) {
            return base.Channel.ObjectChange(sd, ed, name, type, ctype, ownerID);
        }
        
        public System.Threading.Tasks.Task<string> ObjectChangeAsync(string sd, string ed, string name, int type, int ctype, int ownerID) {
            return base.Channel.ObjectChangeAsync(sd, ed, name, type, ctype, ownerID);
        }
        
        public string OCRecord(string ownerName, int index, int count, string action, string name) {
            return base.Channel.OCRecord(ownerName, index, count, action, name);
        }
        
        public System.Threading.Tasks.Task<string> OCRecordAsync(string ownerName, int index, int count, string action, string name) {
            return base.Channel.OCRecordAsync(ownerName, index, count, action, name);
        }
        
        public string AllProperties(int category) {
            return base.Channel.AllProperties(category);
        }
        
        public System.Threading.Tasks.Task<string> AllPropertiesAsync(int category) {
            return base.Channel.AllPropertiesAsync(category);
        }
        
        public string PayRecords() {
            return base.Channel.PayRecords();
        }
        
        public System.Threading.Tasks.Task<string> PayRecordsAsync() {
            return base.Channel.PayRecordsAsync();
        }
        
        public string GetFinancialData() {
            return base.Channel.GetFinancialData();
        }
        
        public System.Threading.Tasks.Task<string> GetFinancialDataAsync() {
            return base.Channel.GetFinancialDataAsync();
        }
        
        public string GetServerOpenStatus() {
            return base.Channel.GetServerOpenStatus();
        }
        
        public System.Threading.Tasks.Task<string> GetServerOpenStatusAsync() {
            return base.Channel.GetServerOpenStatusAsync();
        }
        
        public string SetServerOpenStatus(string openTimestamp, string message) {
            return base.Channel.SetServerOpenStatus(openTimestamp, message);
        }
        
        public System.Threading.Tasks.Task<string> SetServerOpenStatusAsync(string openTimestamp, string message) {
            return base.Channel.SetServerOpenStatusAsync(openTimestamp, message);
        }
        
        public string StopChat(string name, int minute) {
            return base.Channel.StopChat(name, minute);
        }
        
        public System.Threading.Tasks.Task<string> StopChatAsync(string name, int minute) {
            return base.Channel.StopChatAsync(name, minute);
        }
        
        public string StopLogin(string name, int minute) {
            return base.Channel.StopLogin(name, minute);
        }
        
        public System.Threading.Tasks.Task<string> StopLoginAsync(string name, int minute) {
            return base.Channel.StopLoginAsync(name, minute);
        }
        
        public string StopIP(string ip, bool remove) {
            return base.Channel.StopIP(ip, remove);
        }
        
        public System.Threading.Tasks.Task<string> StopIPAsync(string ip, bool remove) {
            return base.Channel.StopIPAsync(ip, remove);
        }
        
        public string UnstopIP(string ip, bool remove) {
            return base.Channel.UnstopIP(ip, remove);
        }
        
        public System.Threading.Tasks.Task<string> UnstopIPAsync(string ip, bool remove) {
            return base.Channel.UnstopIPAsync(ip, remove);
        }
        
        public string SystemMails(int index, int count) {
            return base.Channel.SystemMails(index, count);
        }
        
        public System.Threading.Tasks.Task<string> SystemMailsAsync(int index, int count) {
            return base.Channel.SystemMailsAsync(index, count);
        }
        
        public string SendSystemMail(string title, string content, string awardString, int orderTimestamp, int deadlineTimestamp, int type, string conditions) {
            return base.Channel.SendSystemMail(title, content, awardString, orderTimestamp, deadlineTimestamp, type, conditions);
        }
        
        public System.Threading.Tasks.Task<string> SendSystemMailAsync(string title, string content, string awardString, int orderTimestamp, int deadlineTimestamp, int type, string conditions) {
            return base.Channel.SendSystemMailAsync(title, content, awardString, orderTimestamp, deadlineTimestamp, type, conditions);
        }
        
        public string UpdateSystemMail(long id, string title, string content) {
            return base.Channel.UpdateSystemMail(id, title, content);
        }
        
        public System.Threading.Tasks.Task<string> UpdateSystemMailAsync(long id, string title, string content) {
            return base.Channel.UpdateSystemMailAsync(id, title, content);
        }
        
        public WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj SendMailsByAccount(string accounts, string title, string content, string awards, string orderTime, string DeadLine, int type) {
            return base.Channel.SendMailsByAccount(accounts, title, content, awards, orderTime, DeadLine, type);
        }
        
        public System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj> SendMailsByAccountAsync(string accounts, string title, string content, string awards, string orderTime, string DeadLine, int type) {
            return base.Channel.SendMailsByAccountAsync(accounts, title, content, awards, orderTime, DeadLine, type);
        }
        
        public string SendMailsByAccountNew(string accounts, string title, string content, string awards, int deadlineTimestamp, int type) {
            return base.Channel.SendMailsByAccountNew(accounts, title, content, awards, deadlineTimestamp, type);
        }
        
        public System.Threading.Tasks.Task<string> SendMailsByAccountNewAsync(string accounts, string title, string content, string awards, int deadlineTimestamp, int type) {
            return base.Channel.SendMailsByAccountNewAsync(accounts, title, content, awards, deadlineTimestamp, type);
        }
        
        public string SendMailsByID(string cids, string title, string content, string awards, int deadlineTimestamp, int type) {
            return base.Channel.SendMailsByID(cids, title, content, awards, deadlineTimestamp, type);
        }
        
        public System.Threading.Tasks.Task<string> SendMailsByIDAsync(string cids, string title, string content, string awards, int deadlineTimestamp, int type) {
            return base.Channel.SendMailsByIDAsync(cids, title, content, awards, deadlineTimestamp, type);
        }
        
        public WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj SendMailsByLv(int minLv, int maxLv, string title, string content, WinHost.ServiceReference1.MailType type, string awards, string DeadLine) {
            return base.Channel.SendMailsByLv(minLv, maxLv, title, content, type, awards, DeadLine);
        }
        
        public System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj> SendMailsByLvAsync(int minLv, int maxLv, string title, string content, WinHost.ServiceReference1.MailType type, string awards, string DeadLine) {
            return base.Channel.SendMailsByLvAsync(minLv, maxLv, title, content, type, awards, DeadLine);
        }
        
        public string SendMailsByLvNew(int minLv, int maxLv, string title, string content, WinHost.ServiceReference1.MailType type, string awards, int deadlineTimestamp) {
            return base.Channel.SendMailsByLvNew(minLv, maxLv, title, content, type, awards, deadlineTimestamp);
        }
        
        public System.Threading.Tasks.Task<string> SendMailsByLvNewAsync(int minLv, int maxLv, string title, string content, WinHost.ServiceReference1.MailType type, string awards, int deadlineTimestamp) {
            return base.Channel.SendMailsByLvNewAsync(minLv, maxLv, title, content, type, awards, deadlineTimestamp);
        }
        
        public string SendMailsByName(string cnames, string title, string content, string awards, string DeadLine, int type) {
            return base.Channel.SendMailsByName(cnames, title, content, awards, DeadLine, type);
        }
        
        public System.Threading.Tasks.Task<string> SendMailsByNameAsync(string cnames, string title, string content, string awards, string DeadLine, int type) {
            return base.Channel.SendMailsByNameAsync(cnames, title, content, awards, DeadLine, type);
        }
        
        public string SendMailsByNameNew(string cnames, string title, string content, string awards, int deadlineTimestamp, int type) {
            return base.Channel.SendMailsByNameNew(cnames, title, content, awards, deadlineTimestamp, type);
        }
        
        public System.Threading.Tasks.Task<string> SendMailsByNameNewAsync(string cnames, string title, string content, string awards, int deadlineTimestamp, int type) {
            return base.Channel.SendMailsByNameNewAsync(cnames, title, content, awards, deadlineTimestamp, type);
        }
        
        public string DeleteSystemMail(long id) {
            return base.Channel.DeleteSystemMail(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteSystemMailAsync(long id) {
            return base.Channel.DeleteSystemMailAsync(id);
        }
        
        public string DeleteSMBT(string title) {
            return base.Channel.DeleteSMBT(title);
        }
        
        public System.Threading.Tasks.Task<string> DeleteSMBTAsync(string title) {
            return base.Channel.DeleteSMBTAsync(title);
        }
        
        public string CharacterByName(string name) {
            return base.Channel.CharacterByName(name);
        }
        
        public System.Threading.Tasks.Task<string> CharacterByNameAsync(string name) {
            return base.Channel.CharacterByNameAsync(name);
        }
        
        public string CharactersByAccount(string account) {
            return base.Channel.CharactersByAccount(account);
        }
        
        public System.Threading.Tasks.Task<string> CharactersByAccountAsync(string account) {
            return base.Channel.CharactersByAccountAsync(account);
        }
        
        public WinHost.ServiceReference1.ResultInfo PayByCidInternal(int cid, int quantity, byte type) {
            return base.Channel.PayByCidInternal(cid, quantity, type);
        }
        
        public System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfo> PayByCidInternalAsync(int cid, int quantity, byte type) {
            return base.Channel.PayByCidInternalAsync(cid, quantity, type);
        }
        
        public WinHost.ServiceReference1.ResultInfo PayByCNameInternal(string name, int quantity, byte type) {
            return base.Channel.PayByCNameInternal(name, quantity, type);
        }
        
        public System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfo> PayByCNameInternalAsync(string name, int quantity, byte type) {
            return base.Channel.PayByCNameInternalAsync(name, quantity, type);
        }
        
        public WinHost.ServiceReference1.ResultInfo PayByCAccountNameInternal(string accountName, int quantity, byte type) {
            return base.Channel.PayByCAccountNameInternal(accountName, quantity, type);
        }
        
        public System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfo> PayByCAccountNameInternalAsync(string accountName, int quantity, byte type) {
            return base.Channel.PayByCAccountNameInternalAsync(accountName, quantity, type);
        }
        
        public string FreezeUser(long cid, long endFreezeTimestamp) {
            return base.Channel.FreezeUser(cid, endFreezeTimestamp);
        }
        
        public System.Threading.Tasks.Task<string> FreezeUserAsync(long cid, long endFreezeTimestamp) {
            return base.Channel.FreezeUserAsync(cid, endFreezeTimestamp);
        }
        
        public string KickUser(long cid) {
            return base.Channel.KickUser(cid);
        }
        
        public System.Threading.Tasks.Task<string> KickUserAsync(long cid) {
            return base.Channel.KickUserAsync(cid);
        }
        
        public WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj SendAwardAll(string awards, string type, string mailContent) {
            return base.Channel.SendAwardAll(awards, type, mailContent);
        }
        
        public System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj> SendAwardAllAsync(string awards, string type, string mailContent) {
            return base.Channel.SendAwardAllAsync(awards, type, mailContent);
        }
        
        public WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj SendAwardByAccount(string[] accounts, string awards, string title) {
            return base.Channel.SendAwardByAccount(accounts, awards, title);
        }
        
        public System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj> SendAwardByAccountAsync(string[] accounts, string awards, string title) {
            return base.Channel.SendAwardByAccountAsync(accounts, awards, title);
        }
        
        public WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj SendAwardByID(long[] cids, string awards, string title) {
            return base.Channel.SendAwardByID(cids, awards, title);
        }
        
        public System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj> SendAwardByIDAsync(long[] cids, string awards, string title) {
            return base.Channel.SendAwardByIDAsync(cids, awards, title);
        }
        
        public WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj SendAwardByLv(int minLv, int maxLv, string awards) {
            return base.Channel.SendAwardByLv(minLv, maxLv, awards);
        }
        
        public System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj> SendAwardByLvAsync(int minLv, int maxLv, string awards) {
            return base.Channel.SendAwardByLvAsync(minLv, maxLv, awards);
        }
        
        public WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj SendAwardByName(string[] cnames, string awards) {
            return base.Channel.SendAwardByName(cnames, awards);
        }
        
        public System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfoOfArrayOfstringuHEDJ7Dj> SendAwardByNameAsync(string[] cnames, string awards) {
            return base.Channel.SendAwardByNameAsync(cnames, awards);
        }
        
        public string SendAwardByNameNew(string[] cnames, string awards) {
            return base.Channel.SendAwardByNameNew(cnames, awards);
        }
        
        public System.Threading.Tasks.Task<string> SendAwardByNameNewAsync(string[] cnames, string awards) {
            return base.Channel.SendAwardByNameNewAsync(cnames, awards);
        }
        
        public WinHost.ServiceReference1.ResultInfo SilentUser(long cid, bool silent) {
            return base.Channel.SilentUser(cid, silent);
        }
        
        public System.Threading.Tasks.Task<WinHost.ServiceReference1.ResultInfo> SilentUserAsync(long cid, bool silent) {
            return base.Channel.SilentUserAsync(cid, silent);
        }
        
        public string GetSystemAward(long id) {
            return base.Channel.GetSystemAward(id);
        }
        
        public System.Threading.Tasks.Task<string> GetSystemAwardAsync(long id) {
            return base.Channel.GetSystemAwardAsync(id);
        }
        
        public string GetAllSystemAwards() {
            return base.Channel.GetAllSystemAwards();
        }
        
        public System.Threading.Tasks.Task<string> GetAllSystemAwardsAsync() {
            return base.Channel.GetAllSystemAwardsAsync();
        }
        
        public string GetServerTime() {
            return base.Channel.GetServerTime();
        }
        
        public System.Threading.Tasks.Task<string> GetServerTimeAsync() {
            return base.Channel.GetServerTimeAsync();
        }
        
        public string SetServerTime(int timestamp) {
            return base.Channel.SetServerTime(timestamp);
        }
        
        public System.Threading.Tasks.Task<string> SetServerTimeAsync(int timestamp) {
            return base.Channel.SetServerTimeAsync(timestamp);
        }
        
        public string GetServerBirthTime() {
            return base.Channel.GetServerBirthTime();
        }
        
        public System.Threading.Tasks.Task<string> GetServerBirthTimeAsync() {
            return base.Channel.GetServerBirthTimeAsync();
        }
        
        public string SetServerBirthTime(int timestamp) {
            return base.Channel.SetServerBirthTime(timestamp);
        }
        
        public System.Threading.Tasks.Task<string> SetServerBirthTimeAsync(int timestamp) {
            return base.Channel.SetServerBirthTimeAsync(timestamp);
        }
        
        public string GetOpenLoginTime() {
            return base.Channel.GetOpenLoginTime();
        }
        
        public System.Threading.Tasks.Task<string> GetOpenLoginTimeAsync() {
            return base.Channel.GetOpenLoginTimeAsync();
        }
        
        public string SetOpenLoginTime(int timestamp) {
            return base.Channel.SetOpenLoginTime(timestamp);
        }
        
        public System.Threading.Tasks.Task<string> SetOpenLoginTimeAsync(int timestamp) {
            return base.Channel.SetOpenLoginTimeAsync(timestamp);
        }
        
        public string GetOpenLoginMessage() {
            return base.Channel.GetOpenLoginMessage();
        }
        
        public System.Threading.Tasks.Task<string> GetOpenLoginMessageAsync() {
            return base.Channel.GetOpenLoginMessageAsync();
        }
        
        public string SetOpenLoginMessage(string message) {
            return base.Channel.SetOpenLoginMessage(message);
        }
        
        public System.Threading.Tasks.Task<string> SetOpenLoginMessageAsync(string message) {
            return base.Channel.SetOpenLoginMessageAsync(message);
        }
        
        public string FindCharacterByPartialName(string partialName) {
            return base.Channel.FindCharacterByPartialName(partialName);
        }
        
        public System.Threading.Tasks.Task<string> FindCharacterByPartialNameAsync(string partialName) {
            return base.Channel.FindCharacterByPartialNameAsync(partialName);
        }
        
        public string FindCharacterByAccount(string account) {
            return base.Channel.FindCharacterByAccount(account);
        }
        
        public System.Threading.Tasks.Task<string> FindCharacterByAccountAsync(string account) {
            return base.Channel.FindCharacterByAccountAsync(account);
        }
        
        public string FindCharacterByPartialAccount(string account) {
            return base.Channel.FindCharacterByPartialAccount(account);
        }
        
        public System.Threading.Tasks.Task<string> FindCharacterByPartialAccountAsync(string account) {
            return base.Channel.FindCharacterByPartialAccountAsync(account);
        }
        
        public string FindCharacterById(long id) {
            return base.Channel.FindCharacterById(id);
        }
        
        public System.Threading.Tasks.Task<string> FindCharacterByIdAsync(long id) {
            return base.Channel.FindCharacterByIdAsync(id);
        }
        
        public string CreateTestItems(long cid, int categoriesInt) {
            return base.Channel.CreateTestItems(cid, categoriesInt);
        }
        
        public System.Threading.Tasks.Task<string> CreateTestItemsAsync(long cid, int categoriesInt) {
            return base.Channel.CreateTestItemsAsync(cid, categoriesInt);
        }
        
        public string DeleteStuff(string type, long id) {
            return base.Channel.DeleteStuff(type, id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteStuffAsync(string type, long id) {
            return base.Channel.DeleteStuffAsync(type, id);
        }
        
        public void RandomSceneEvent(long targetID, string key) {
            base.Channel.RandomSceneEvent(targetID, key);
        }
        
        public System.Threading.Tasks.Task RandomSceneEventAsync(long targetID, string key) {
            return base.Channel.RandomSceneEventAsync(targetID, key);
        }
        
        public string GetAllItems() {
            return base.Channel.GetAllItems();
        }
        
        public System.Threading.Tasks.Task<string> GetAllItemsAsync() {
            return base.Channel.GetAllItemsAsync();
        }
        
        public string ShowAllAwardOrigin() {
            return base.Channel.ShowAllAwardOrigin();
        }
        
        public System.Threading.Tasks.Task<string> ShowAllAwardOriginAsync() {
            return base.Channel.ShowAllAwardOriginAsync();
        }
        
        public string ShowAwardOrigin(long typeId) {
            return base.Channel.ShowAwardOrigin(typeId);
        }
        
        public System.Threading.Tasks.Task<string> ShowAwardOriginAsync(long typeId) {
            return base.Channel.ShowAwardOriginAsync(typeId);
        }
        
        public string InitAwardSummary() {
            return base.Channel.InitAwardSummary();
        }
        
        public System.Threading.Tasks.Task<string> InitAwardSummaryAsync() {
            return base.Channel.InitAwardSummaryAsync();
        }
        
        public string TestWebJson() {
            return base.Channel.TestWebJson();
        }
        
        public System.Threading.Tasks.Task<string> TestWebJsonAsync() {
            return base.Channel.TestWebJsonAsync();
        }
        
        public string ExcuteScript(string script) {
            return base.Channel.ExcuteScript(script);
        }
        
        public System.Threading.Tasks.Task<string> ExcuteScriptAsync(string script) {
            return base.Channel.ExcuteScriptAsync(script);
        }
        
        public string GetPromoUsers(string code, int index, int count) {
            return base.Channel.GetPromoUsers(code, index, count);
        }
        
        public System.Threading.Tasks.Task<string> GetPromoUsersAsync(string code, int index, int count) {
            return base.Channel.GetPromoUsersAsync(code, index, count);
        }
    }
}
